2. 
	a. command -> expr
		expr -> term '+' expr | term
		term -> factor | factor * term
		factor -> '(' expr ')' | number
		number -> digit { digit }
		digit -> '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
		 
	b. * has higher precedence then +
	c. ( 5 + ( 2 * 10 ) )
		( 5 + ( 2 + 10 ) )
	d. command => expr
		expr => expr '+' term
		expr => term
		term => factor
		factor => number
		number => digit
		digit => 5
		term => term * factor
		term => factor
		factor => number
		number => digit
		digit => 2
		factor => number
		number => digit
		digit => 10
3. 	
	a.	command -> expr
		expr -> term '+' expr | term
		term -> average | average * term
		average -> factor | factor @ average
		factor -> '(' expr ')' | number
		number -> digit { digit }
		digit -> '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
	b.	1.	( 10 + ( 20 + 30 ) )
		2.	(10 @ 20) * (2 @ 6)
		3. (2 @ 10) + (51 @ 5)
	c.	They are all right associative.
	
4. see Fig4_12R.c

Part 2

	2.	a.	command -> expr '\n'
			expr -> expr '+' term | term
			term -> term '*' factor | factor
			factor -> '(' expr ')' | number
			number -> digit { digit }
			digit -> '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
			
		b. * has the highest precedence followed by +
		c. 1. 5 + (2 * 10)
			2.	( 5 + (2 + 10) )
		d. command  => expr 'n'
			expr => expr '+' term
			
	3.	a. command -> expr '\n'
			expr -> expr '+' average | average
			average -> average '@' term | term
			term -> term '*' factor | factor
			factor -> '(' expr ')' | number
			number -> digit { digit }
			digit -> '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
		b. ( 10 + ( 20 + 30 ) )
			( ( 10 @ (20 * 2) ) @ 6 )
			(2 @ 10) + ( 51 @ 5 )
		c. left associative
	4. see Fig4_12.c
